// Copyright 2022 The Engula Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Automatically generated by cmd_tables_gen.py, do not edit.

/* We have fabulous commands from
 * the fantastic
 * Redis Command Table! */

use std::{collections::HashMap, vec};

use super::*;
use crate::Parse;

fn unimplemented(_: &CommandDescs, _: &mut Parse) -> crate::Result<Box<dyn super::CommandAction>> {
    unimplemented!()
}

pub fn all_cmd_tables() -> HashMap<String, CommandDesc> {
    // ********** PING ********************

    // PING tips
    let ping_tips = vec![
        "request_policy:all_shards".to_string(),
        "response_policy:all_succeeded".to_string(),
    ];

    // PING argument table
    let ping_args = vec![Arg {
        name: "message".to_string(),
        typ: ArgType::String,
        key_spec_index: -1,
        token: "".to_string(),
        summary: "".to_string(),
        since: "".to_string(),
        flag: CMD_ARG_OPTIONAL,
        deprecated_since: "".to_string(),
        sub_args: vec![],
    }];

    // ********** DEL ********************

    // DEL tips
    let del_tips = vec![
        "request_policy:multi_shard".to_string(),
        "response_policy:agg_sum".to_string(),
    ];

    // DEL argument table
    let del_args = vec![Arg {
        name: "key".to_string(),
        typ: ArgType::Key,
        key_spec_index: 0,
        token: "".to_string(),
        summary: "".to_string(),
        since: "".to_string(),
        flag: CMD_ARG_MULTIPLE,
        deprecated_since: "".to_string(),
        sub_args: vec![],
    }];

    // ********** COMMAND INFO ********************

    // COMMAND INFO tips
    let command_info_tips = vec!["nondeterministic_output_order".to_string()];

    // COMMAND INFO argument table
    let command_info_args = vec![Arg {
        name: "command-name".to_string(),
        typ: ArgType::String,
        key_spec_index: -1,
        token: "".to_string(),
        summary: "".to_string(),
        since: "".to_string(),
        flag: CMD_ARG_OPTIONAL | CMD_ARG_MULTIPLE,
        deprecated_since: "".to_string(),
        sub_args: vec![],
    }];

    // COMMAND command table
    let command_subcommands = vec![CommandDesc {
        name: "info".to_string(),
        summary: "Get array of specific Redis command details, or all when no argument is given."
            .to_string(),
        complexity: "O(N) where N is the number of commands to look up".to_string(),
        since: "2.8.13".to_string(),
        doc_flags: CMD_DOC_NONE,
        replaced_by: "".to_string(),
        deprecated_since: "".to_string(),
        group: Group::Server,
        tips: command_info_tips,
        parse: command::parse_command_info,
        arity: -2,
        flags: CMD_LOADING | CMD_STALE,
        acl_categories: ACL_CATEGORY_CONNECTION,
        key_specs: vec![],
        sub_cmds: None,
        args: command_info_args,
    }]
    .into_iter()
    .map(|d| (d.name.to_owned(), d))
    .collect();

    // ********** COMMAND ********************

    // COMMAND tips
    let command_tips = vec!["nondeterministic_output_order".to_string()];

    // ********** INFO ********************

    // INFO tips
    let info_tips = vec![
        "nondeterministic_output".to_string(),
        "request_policy:all_shards".to_string(),
        "response_policy:special".to_string(),
    ];

    // INFO argument table
    let info_args = vec![Arg {
        name: "section".to_string(),
        typ: ArgType::String,
        key_spec_index: -1,
        token: "".to_string(),
        summary: "".to_string(),
        since: "".to_string(),
        flag: CMD_ARG_OPTIONAL | CMD_ARG_MULTIPLE,
        deprecated_since: "".to_string(),
        sub_args: vec![],
    }];

    // ********** GET ********************

    // GET tips
    let get_tips = vec![];

    // GET argument table
    let get_args = vec![Arg {
        name: "key".to_string(),
        typ: ArgType::Key,
        key_spec_index: 0,
        token: "".to_string(),
        summary: "".to_string(),
        since: "".to_string(),
        flag: CMD_ARG_NONE,
        deprecated_since: "".to_string(),
        sub_args: vec![],
    }];

    // ********** GETDEL ********************

    // GETDEL tips
    let getdel_tips = vec![];

    // GETDEL argument table
    let getdel_args = vec![Arg {
        name: "key".to_string(),
        typ: ArgType::Key,
        key_spec_index: 0,
        token: "".to_string(),
        summary: "".to_string(),
        since: "".to_string(),
        flag: CMD_ARG_NONE,
        deprecated_since: "".to_string(),
        sub_args: vec![],
    }];

    // ********** GETEX ********************

    // GETEX tips
    let getex_tips = vec![];

    // GETEX expiration argument table
    let getex_expiration_aubargs = vec![
        Arg {
            name: "seconds".to_string(),
            typ: ArgType::Integer,
            key_spec_index: -1,
            token: "EX".to_string(),
            summary: "".to_string(),
            since: "".to_string(),
            flag: CMD_ARG_NONE,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
        Arg {
            name: "milliseconds".to_string(),
            typ: ArgType::Integer,
            key_spec_index: -1,
            token: "PX".to_string(),
            summary: "".to_string(),
            since: "".to_string(),
            flag: CMD_ARG_NONE,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
        Arg {
            name: "unix-time-seconds".to_string(),
            typ: ArgType::UnixTime,
            key_spec_index: -1,
            token: "EXAT".to_string(),
            summary: "".to_string(),
            since: "".to_string(),
            flag: CMD_ARG_NONE,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
        Arg {
            name: "unix-time-milliseconds".to_string(),
            typ: ArgType::UnixTime,
            key_spec_index: -1,
            token: "PXAT".to_string(),
            summary: "".to_string(),
            since: "".to_string(),
            flag: CMD_ARG_NONE,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
        Arg {
            name: "persist".to_string(),
            typ: ArgType::UnixTime,
            key_spec_index: -1,
            token: "PERSIST".to_string(),
            summary: "".to_string(),
            since: "".to_string(),
            flag: CMD_ARG_NONE,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
    ];

    // GETEX argument table
    let getex_args = vec![
        Arg {
            name: "key".to_string(),
            typ: ArgType::Key,
            key_spec_index: 0,
            token: "".to_string(),
            summary: "".to_string(),
            since: "".to_string(),
            flag: CMD_ARG_NONE,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
        Arg {
            name: "expiration".to_string(),
            typ: ArgType::OneOf,
            key_spec_index: -1,
            token: "".to_string(),
            summary: "".to_string(),
            since: "".to_string(),
            flag: CMD_ARG_OPTIONAL,
            deprecated_since: "".to_string(),
            sub_args: getex_expiration_aubargs,
        },
    ];

    // ********** GETRANGE ********************

    // GETRANGE tips
    let getrange_tips = vec![];

    // GETRANGE argument table
    let getrange_args = vec![
        Arg {
            name: "key".to_string(),
            typ: ArgType::Key,
            key_spec_index: 0,
            token: "".to_string(),
            summary: "".to_string(),
            since: "".to_string(),
            flag: CMD_ARG_NONE,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
        Arg {
            name: "start".to_string(),
            typ: ArgType::Integer,
            key_spec_index: -1,
            token: "".to_string(),
            summary: "".to_string(),
            since: "".to_string(),
            flag: CMD_ARG_NONE,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
        Arg {
            name: "end".to_string(),
            typ: ArgType::Integer,
            key_spec_index: -1,
            token: "".to_string(),
            summary: "".to_string(),
            since: "".to_string(),
            flag: CMD_ARG_NONE,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
    ];

    // ********** SET ********************

    // SET tips
    let set_tips = vec![];

    // SET condition argument table
    let set_condition_aubargs = vec![
        Arg {
            name: "nx".to_string(),
            typ: ArgType::UnixTime,
            key_spec_index: -1,
            token: "NX".to_string(),
            summary: "".to_string(),
            since: "".to_string(),
            flag: CMD_ARG_NONE,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
        Arg {
            name: "xx".to_string(),
            typ: ArgType::UnixTime,
            key_spec_index: -1,
            token: "XX".to_string(),
            summary: "".to_string(),
            since: "".to_string(),
            flag: CMD_ARG_NONE,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
    ];

    // SET expiration argument table
    let set_expiration_aubargs = vec![
        Arg {
            name: "seconds".to_string(),
            typ: ArgType::Integer,
            key_spec_index: -1,
            token: "EX".to_string(),
            summary: "".to_string(),
            since: "2.6.12".to_string(),
            flag: CMD_ARG_NONE,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
        Arg {
            name: "milliseconds".to_string(),
            typ: ArgType::Integer,
            key_spec_index: -1,
            token: "PX".to_string(),
            summary: "".to_string(),
            since: "2.6.12".to_string(),
            flag: CMD_ARG_NONE,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
        Arg {
            name: "unix-time-seconds".to_string(),
            typ: ArgType::UnixTime,
            key_spec_index: -1,
            token: "EXAT".to_string(),
            summary: "".to_string(),
            since: "6.2.0".to_string(),
            flag: CMD_ARG_NONE,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
        Arg {
            name: "unix-time-milliseconds".to_string(),
            typ: ArgType::UnixTime,
            key_spec_index: -1,
            token: "PXAT".to_string(),
            summary: "".to_string(),
            since: "6.2.0".to_string(),
            flag: CMD_ARG_NONE,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
        Arg {
            name: "keepttl".to_string(),
            typ: ArgType::UnixTime,
            key_spec_index: -1,
            token: "KEEPTTL".to_string(),
            summary: "".to_string(),
            since: "6.0.0".to_string(),
            flag: CMD_ARG_NONE,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
    ];

    // SET argument table
    let set_args = vec![
        Arg {
            name: "key".to_string(),
            typ: ArgType::Key,
            key_spec_index: 0,
            token: "".to_string(),
            summary: "".to_string(),
            since: "".to_string(),
            flag: CMD_ARG_NONE,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
        Arg {
            name: "value".to_string(),
            typ: ArgType::String,
            key_spec_index: -1,
            token: "".to_string(),
            summary: "".to_string(),
            since: "".to_string(),
            flag: CMD_ARG_NONE,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
        Arg {
            name: "condition".to_string(),
            typ: ArgType::OneOf,
            key_spec_index: -1,
            token: "".to_string(),
            summary: "".to_string(),
            since: "2.6.12".to_string(),
            flag: CMD_ARG_OPTIONAL,
            deprecated_since: "".to_string(),
            sub_args: set_condition_aubargs,
        },
        Arg {
            name: "get".to_string(),
            typ: ArgType::UnixTime,
            key_spec_index: -1,
            token: "GET".to_string(),
            summary: "".to_string(),
            since: "6.2.0".to_string(),
            flag: CMD_ARG_OPTIONAL,
            deprecated_since: "".to_string(),
            sub_args: vec![],
        },
        Arg {
            name: "expiration".to_string(),
            typ: ArgType::OneOf,
            key_spec_index: -1,
            token: "".to_string(),
            summary: "".to_string(),
            since: "".to_string(),
            flag: CMD_ARG_OPTIONAL,
            deprecated_since: "".to_string(),
            sub_args: set_expiration_aubargs,
        },
    ];

    // Main command table
    [
// connection
CommandDesc {name: "ping".to_string(), summary: "Ping the server".to_string(), complexity: "O(1)".to_string(), since: "1.0.0".to_string(), doc_flags: CMD_DOC_NONE,replaced_by: "".to_string(),deprecated_since: "".to_string(), group: Group::Connection, tips: ping_tips, parse: ping::parse_frames, arity: -1, flags: CMD_FAST|CMD_SENTINEL, acl_categories: ACL_CATEGORY_CONNECTION,key_specs: vec![],sub_cmds: None,args: ping_args},
// generic
CommandDesc {name: "del".to_string(), summary: "Delete a key".to_string(), complexity: "O(N) where N is the number of keys that will be removed. When a key to remove holds a value other than a string, the individual complexity for this key is O(M) where M is the number of elements in the list, set, sorted set or hash. Removing a single key that holds a string value is O(1).".to_string(), since: "1.0.0".to_string(), doc_flags: CMD_DOC_NONE,replaced_by: "".to_string(),deprecated_since: "".to_string(), group: Group::Generic, tips: del_tips, parse: del::parse_frames, arity: -2, flags: CMD_WRITE, acl_categories: ACL_CATEGORY_KEYSPACE,key_specs: vec![KeySpec{notes: "".to_string(), flags: CMD_KEY_RM|CMD_KEY_DELETE, bs: BeginSearch::Index(1), fk: FindKeys::Range { last_key: -1, key_step: 1, limit: 0 }}],sub_cmds: None,args: del_args},
// server
CommandDesc {name: "command".to_string(), summary: "Get array of Redis command details".to_string(), complexity: "O(N) where N is the total number of Redis commands".to_string(), since: "2.8.13".to_string(), doc_flags: CMD_DOC_NONE,replaced_by: "".to_string(),deprecated_since: "".to_string(), group: Group::Server, tips: command_tips, parse: command::parse_command, arity: -1, flags: CMD_LOADING|CMD_STALE|CMD_SENTINEL, acl_categories: ACL_CATEGORY_CONNECTION,key_specs: vec![],sub_cmds: Some(command_subcommands),args: vec![]},
CommandDesc {name: "info".to_string(), summary: "Get information and statistics about the server".to_string(), complexity: "O(1)".to_string(), since: "1.0.0".to_string(), doc_flags: CMD_DOC_NONE,replaced_by: "".to_string(),deprecated_since: "".to_string(), group: Group::Server, tips: info_tips, parse: info::parse_frames, arity: -1, flags: CMD_LOADING|CMD_STALE|CMD_SENTINEL, acl_categories: ACL_CATEGORY_DANGEROUS,key_specs: vec![],sub_cmds: None,args: info_args},
// string
CommandDesc {name: "get".to_string(), summary: "Get the value of a key".to_string(), complexity: "O(1)".to_string(), since: "1.0.0".to_string(), doc_flags: CMD_DOC_NONE,replaced_by: "".to_string(),deprecated_since: "".to_string(), group: Group::String, tips: get_tips, parse: get::parse_frames, arity: 2, flags: CMD_READONLY|CMD_FAST, acl_categories: ACL_CATEGORY_STRING,key_specs: vec![KeySpec{notes: "".to_string(), flags: CMD_KEY_RO|CMD_KEY_ACCESS, bs: BeginSearch::Index(1), fk: FindKeys::Range { last_key: 0, key_step: 1, limit: 0 }}],sub_cmds: None,args: get_args},
CommandDesc {name: "getdel".to_string(), summary: "Get the value of a key and delete the key".to_string(), complexity: "O(1)".to_string(), since: "6.2.0".to_string(), doc_flags: CMD_DOC_NONE,replaced_by: "".to_string(),deprecated_since: "".to_string(), group: Group::String, tips: getdel_tips, parse: get::parse_del_frames, arity: 2, flags: CMD_WRITE|CMD_FAST, acl_categories: ACL_CATEGORY_STRING,key_specs: vec![KeySpec{notes: "".to_string(), flags: CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_DELETE, bs: BeginSearch::Index(1), fk: FindKeys::Range { last_key: 0, key_step: 1, limit: 0 }}],sub_cmds: None,args: getdel_args},
CommandDesc {name: "getex".to_string(), summary: "Get the value of a key and optionally set its expiration".to_string(), complexity: "O(1)".to_string(), since: "6.2.0".to_string(), doc_flags: CMD_DOC_NONE,replaced_by: "".to_string(),deprecated_since: "".to_string(), group: Group::String, tips: getex_tips, parse: get::parse_ext_frames, arity: -2, flags: CMD_WRITE|CMD_FAST, acl_categories: ACL_CATEGORY_STRING,key_specs: vec![KeySpec{notes: "RW and UPDATE because it changes the TTL".to_string(), flags: CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE, bs: BeginSearch::Index(1), fk: FindKeys::Range { last_key: 0, key_step: 1, limit: 0 }}],sub_cmds: None,args: getex_args},
CommandDesc {name: "getrange".to_string(), summary: "Get a substring of the string stored at a key".to_string(), complexity: "O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.".to_string(), since: "2.4.0".to_string(), doc_flags: CMD_DOC_NONE,replaced_by: "".to_string(),deprecated_since: "".to_string(), group: Group::String, tips: getrange_tips, parse: get::parse_range_frames, arity: 4, flags: CMD_READONLY, acl_categories: ACL_CATEGORY_STRING,key_specs: vec![KeySpec{notes: "".to_string(), flags: CMD_KEY_RO|CMD_KEY_ACCESS, bs: BeginSearch::Index(1), fk: FindKeys::Range { last_key: 0, key_step: 1, limit: 0 }}],sub_cmds: None,args: getrange_args},
CommandDesc {name: "set".to_string(), summary: "Set the string value of a key".to_string(), complexity: "O(1)".to_string(), since: "1.0.0".to_string(), doc_flags: CMD_DOC_NONE,replaced_by: "".to_string(),deprecated_since: "".to_string(), group: Group::String, tips: set_tips, parse: set::parse_frames, arity: -3, flags: CMD_WRITE|CMD_DENYOOM, acl_categories: ACL_CATEGORY_STRING,key_specs: vec![KeySpec{notes: "RW and ACCESS due to the optional `GET` argument".to_string(), flags: CMD_KEY_RW|CMD_KEY_ACCESS|CMD_KEY_UPDATE|CMD_KEY_VARIABLE_FLAGS, bs: BeginSearch::Index(1), fk: FindKeys::Range { last_key: 0, key_step: 1, limit: 0 }}],sub_cmds: None,args: set_args},
].into_iter().map(|e| (e.name.clone(), e)).collect()
}
