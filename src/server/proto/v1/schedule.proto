// Copyright 2022 The Engula Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package serverpb.v1;

import "eraft.proto";
import "engula/server/v1/metadata.proto";
import "v1/metadata.proto";
import "engula/v1/metadata.proto";

message ScheduleTask {
  oneof value {
    /// cure_group will allocates replicas from root, and replace the lost
    /// replicas.
    ChangeConfigTask cure_group = 1;

    RemoveReplicaTask remove_replica = 2;
  }
}

message RemoveReplicaTask {
  engula.server.v1.ReplicaDesc replica = 1;
  engula.server.v1.GroupDesc group = 2;
}

message ChangeConfigTask {
  TaskStep current = 1;

  CreateReplicaStep create_replica = 2;
  AddLearnerStep add_learner = 3;
  ReplaceVoterStep replace_voter = 4;
  RemoveLearnerStep remove_learner = 5;
}

enum TaskStep {
  INITIALIZED = 0;
  CREATE_REPLICA = 1;
  ADD_LEARNER = 2;
  REPLACE_VOTER = 3;
  REMOVE_LEARNER = 4;
}

message CreateReplicaStep {
  repeated engula.server.v1.ReplicaDesc replicas = 1;
}

message AddLearnerStep { repeated engula.server.v1.ReplicaDesc replicas = 1; }

message ReplaceVoterStep {
  repeated engula.server.v1.ReplicaDesc incoming_voters = 1;
  repeated engula.server.v1.ReplicaDesc outgoing_voters = 2;
}

message RemoveLearnerStep {
  repeated engula.server.v1.ReplicaDesc learners = 1;
}

message ReconcileTask {
  oneof task {
    CreateGroupTask create_group = 1;
    ReallocateReplicaTask reallocate_replica = 2;
    MigrateShardTask migrate_shard = 3;
    TransferGroupLeaderTask transfer_group_leader = 4;
    ShedLeaderTask shed_leader = 5;
    ShedRootLeaderTask shed_root = 6;
  }
}

message CreateGroupTask {
  uint64 request_replica_cnt = 1;
  engula.server.v1.GroupDesc group_desc = 2;
  repeated engula.server.v1.NodeDesc wait_create = 3;
  repeated engula.server.v1.ReplicaDesc wait_cleanup = 4;
  CreateGroupTaskStep step = 5;
  uint64 create_retry = 6;
  repeated uint64 invoked_nodes = 7;
}

enum CreateGroupTaskStep {
  GROUP_INIT = 0;
  GROUP_CREATING = 1;
  GROUP_ROLLBACKING = 2;
  GROUP_FINISH = 3;
  GROUP_ABORT = 4;
}

message ReallocateReplicaTask {
  uint64 group = 1;
  uint64 src_node = 2;
  uint64 src_replica = 3;
  engula.server.v1.NodeDesc dest_node = 4;
  engula.server.v1.ReplicaDesc dest_replica = 5;
  ReallocateReplicaTaskStep step = 6;
}

enum ReallocateReplicaTaskStep {
  CREATING_DEST_REPLICA = 0;
  ADD_DEST_LEARNER = 1;
  REPLACE_DEST_VOTER = 2;
  SHED_SOURCE_LEADER = 3;
  REMOVE_SOURCE_MEMBERSHIP = 4;
  REMOVE_SOURCE_REPLICA = 5;
  REALLOCATE_FINISH = 6;
  REALLOCATE_ABORT = 7;
}

message MigrateShardTask {
  uint64 shard = 1;
  uint64 src_group = 2;
  uint64 dest_group = 3;
}

message TransferGroupLeaderTask {
  uint64 group = 1;
  uint64 target_replica = 2;
  uint64 src_node = 3;
  uint64 dest_node = 4;
}

message ShedLeaderTask { uint64 node_id = 1; }

message ShedRootLeaderTask { uint64 node_id = 1; }

message BackgroundJob {
  uint64 id = 1;
  oneof job { CreateCollectionJob create_collection = 2; }
}

message CreateCollectionJob {
  uint64 database = 1;
  string collection_name = 2;
  repeated engula.server.v1.ShardDesc wait_create = 3;
  repeated engula.server.v1.ShardDesc wait_cleanup = 4;
  CreateCollectionJobStatus status = 5;
  string remark = 6;
  engula.v1.CollectionDesc desc = 7;
}

enum CreateCollectionJobStatus {
  CREATE_COLLECTION_CREATING = 0;
  CREATE_COLLECTION_ROLLBACKING = 1;
  CREATE_COLLECTION_WRITE_DESC = 2;
  CREATE_COLLECTION_FINISH = 3;
  CREATE_COLLECTION_ABORT = 4;
}
