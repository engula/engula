// Copyright 2022 The Engula Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file contains data structures that only node will use.

syntax = "proto3";

package serverpb.v1;

import "eraft.proto";
import "engula/server/v1/metadata.proto";

message SnapshotMeta {
    EntryID apply_state = 1;
    engula.server.v1.GroupDesc group_desc = 2;
    repeated SnapshotFile files = 3;
}

message SnapshotFile {
    // The relative path of snapshot file. eg `DATA/1.sst`, `META`.
    bytes name = 1;
    uint32 crc32 = 2;
    uint64 size = 3;
}

/// A NodeIdent uniquely identifies a node in the cluster.
message NodeIdent {
  bytes cluster_id = 1;
  uint64 node_id = 2;
}

message RootDesc {
  repeated engula.server.v1.NodeDesc root_nodes = 1;
}

enum ReplicaLocalState {
  /// With membership, but couldn't supply service.  It is used in group creation.
  INITIAL = 0;
  /// Without membership, only response raft messages.
  PENDING = 1;
  NORMAL = 2;
  /// The service and memory states are shutdown and cleans, but disk data still exists.
  TERMINATED = 3;
  TOMBSTONE = 4;
}

message ReplicaMeta {
  uint64 group_id = 1;
  uint64 replica_id = 2;
  ReplicaLocalState state = 3;
}

message EntryID {
  uint64 index = 1;
  uint64 term = 2;
}

message RaftLocalState {
  uint64 replica_id = 1;
  EntryID last_truncated = 3;
}

enum MigrateState {
  /// The dest group shold send request to source group to begin migration.  Once the source
  /// group agrees to start the migration, the migration process must be completed.
  Initial = 0;
  Migrating = 1;
  /// Used in dest group, it should notify the source group that migration has already finished.
  HalfFinished = 2;
  /// For source group, the data of shard should be clean.
  Finished = 3;
  /// For dest group, the data of shard should be clean.
  Aborted = 4;
}

message MigrateMeta {
  engula.server.v1.ShardDesc shard_desc = 1;
  uint64 src_group_id = 2;
  uint64 src_group_epoch = 4;
  uint64 dest_group_id = 5;
  bytes last_migrated_key = 6;
  MigrateState state = 7;
}

/// EvalResult is the structured proposal payload.
message EvalResult {
  WriteBatchRep batch = 1;
  SyncOp op = 2;
}

/// WriteBatchRep is the serialized representation of DB write batch.
message WriteBatchRep {
  bytes data = 1;
}

/// SyncOp is a structured message which contain operations must be executed in order in all replicas.
message SyncOp {
  /// Add new shard to existing group.
  AddShard add_shard = 1;
  /// Purge an orphan replica.
  PurgeOrphanReplica purge_replica = 2;
  /// An event of shard migration.
  MigrateEvent migrate_event = 3;
}

message AddShard {
  engula.server.v1.ShardDesc shard = 1;
}

/// PurgeOrphanReplica is used by the replica leader. When the replica leader finds an orphan
/// replica, it can propose a command. After the command is successfully executed, the replica
/// can be shutdown safely.
message PurgeOrphanReplica {
  uint64 replica_id = 1;
}

message MigrateEvent {
  oneof value {
    Prepare prepare = 1;
    Ingest ingest = 2;
    Commit commit = 3;
    Abort abort = 4;
  };

  message Prepare {
    engula.server.v1.ShardDesc shard_desc = 1;
    uint64 src_group_id = 2;
    uint64 src_group_epoch = 3;
    uint64 dest_group_id = 4;
  }

  message Ingest {
    bytes last_key = 1;
  }

  message Commit {}

  message Abort {}
}
