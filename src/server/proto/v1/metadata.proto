// Copyright 2022 The Engula Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file contains data structures that only node will use.

syntax = "proto3";

package serverpb.v1;

import "engula/server/v1/metadata.proto";

message SnapshotMeta {
  EntryID apply_state = 1;
  engula.server.v1.GroupDesc group_desc = 2;
  repeated SnapshotFile files = 3;
}

message SnapshotFile {
  // The relative path of snapshot file. eg `DATA/1.sst`, `META`.
  bytes name = 1;
  uint32 crc32 = 2;
  uint64 size = 3;
}

/// A NodeIdent uniquely identifies a node in the cluster.
message NodeIdent {
  bytes cluster_id = 1;
  uint64 node_id = 2;
}

/// This indicates the state of metadata of a group replica.
enum ReplicaLocalState {
  /// The key metadata of an replica are created(recoverable by restart), but
  /// the otheres metadata are still in creating.
  INITIAL = 0;

  /// The replica has been demaged and is in the process of recovery, and once
  /// recovered, the replica will return to `Normal` state.
  PENDING = 1;

  /// The replica is ready for serving requests.
  NORMAL = 2;

  /// The replica needs to be deleted, at now it has stopped serving and
  /// cleaned up the in-memory state, but there is still dirty data on disk that
  /// needs to be cleaned up.
  TERMINATED = 3;

  /// The replica has been removed.
  ///
  /// In a replication group, the replica data cannot be rolled back. In other
  /// words, a replica cannot be created multiple times on the same node, so it
  /// is necessary to record the replicas that this node has served.
  TOMBSTONE = 4;
}

message ReplicaMeta {
  uint64 group_id = 1;
  uint64 replica_id = 2;
  ReplicaLocalState state = 3;
}

message EntryID {
  uint64 index = 1;
  uint64 term = 2;
}

message RaftLocalState {
  uint64 replica_id = 1;
  EntryID last_truncated = 3;
}

/// For dest group:
///   INITIAL -> MIGRATING -> MIGRATED -> FINISHED
///           -> ABORT
///
/// For source group:
///   MIGRATING -> MIGRATED -> FINISHED
///
enum MigrationStep {
  /// The dest group shold send request to source group to begin migration. Once
  /// the source group agrees to start the migration, the migration process must
  /// be completed.
  PREPARE = 0;
  MIGRATING = 1;
  /// Used in dest group, it should notify the source group that migration has
  /// already finished.
  MIGRATED = 2;

  FINISHED = 3;
  ABORTED = 4;
}

message MigrationState {
  /// The descriptor of migration.
  engula.server.v1.MigrationDesc migration_desc = 1;

  /// For dest group, this field saves the last key migrated by background
  /// pulling.
  bytes last_migrated_key = 7;

  /// The step of migration progress.
  MigrationStep step = 8;
}

/// EvalResult is the structured proposal payload.
message EvalResult {
  WriteBatchRep batch = 1;
  optional SyncOp op = 2;
}

/// WriteBatchRep is the serialized representation of DB write batch.
message WriteBatchRep { bytes data = 1; }

/// SyncOp is a structured message which contain operations must be executed in
/// order in all replicas.
message SyncOp {
  /// Add new shard to existing group.
  AddShard add_shard = 1;
  /// Purge an orphan replica.
  PurgeOrphanReplica purge_replica = 2;
  /// An event of shard migration.
  Migration migration = 3;

  /// A trick, force prost box the `SyncOp`, because `SyncOp` message is too
  /// large.
  EvalResult must_boxed = 128;
}

message AddShard { engula.server.v1.ShardDesc shard = 1; }

/// PurgeOrphanReplica is used by the replica leader. When the replica leader
/// finds an orphan replica, it can propose a command. After the command is
/// successfully executed, the replica can be shutdown safely.
message PurgeOrphanReplica { uint64 replica_id = 1; }

message Migration {
  enum Event {
    SETUP = 0;
    INGEST = 1;
    COMMIT = 2;
    ABORT = 3;
    /// Remove migration state.
    APPLY = 4;
  }

  Event event = 1;

  engula.server.v1.MigrationDesc migration_desc = 2;

  /// The latest migrated key, used for fault tolerance, locate the cursor that
  /// has been replicated.
  bytes last_ingested_key = 3;
}
