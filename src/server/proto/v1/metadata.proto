// Copyright 2022 The Engula Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file contains data structures that only node will use.

syntax = "proto3";

package serverpb.v1;

import "engula/server/v1/metadata.proto";

/// A NodeIdent uniquely identifies a node in the cluster.
message NodeIdent {
  bytes cluster_id = 1;
  uint64 node_id = 2;
}

message RootDesc {
  repeated engula.server.v1.NodeDesc root_nodes = 1;
}

enum ReplicaState {
  /// With membership, but couldn't supply service.  It is used in group creation.
  INITIAL = 0;
  /// Without membership, only response raft messages.
  PENDING = 1;
  NORMAL = 2;
  /// The service and memory states are shutdown and cleans, but disk data still exists.
  TERMINATED = 3;
  TOMBSTONE = 4;
}

message ReplicaMeta {
  uint64 group_id = 1;
  uint64 replica_id = 2;
  ReplicaState state = 3;
}

/// EvalResult is the structured proposal payload.
message EvalResult {
  WriteBatchRep batch = 1;
  SyncOp op = 2;
}

/// WriteBatchRep is the serialized representation of DB write batch.
message WriteBatchRep {
  bytes data = 1;
}

/// SyncOp is a structured message which contain operations must be executed in order in all replicas.
message SyncOp {
  /// Add new shard to existing group.
  AddShard add_shard = 1;
}

message AddShard {
  engula.server.v1.ShardDesc shard = 1;
}
