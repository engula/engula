// Copyright 2022 The Engula Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package objectengine.master.v1;

service Master {
  rpc Tenant(TenantRequest) returns (TenantResponse) {}

  rpc Bucket(BucketRequest) returns (BucketResponse) {}

  rpc Ingest(IngestRequest) returns (IngestResponse) {}
}

message TenantRequest { repeated TenantRequestUnion requests = 1; }

message TenantResponse { repeated TenantResponseUnion responses = 1; }

message TenantRequestUnion {
  oneof request {
    ListTenantsRequest list_tenants = 1;
    CreateTenantRequest create_tenant = 2;
    UpdateTenantRequest update_tenant = 3;
    DeleteTenantRequest delete_tenant = 4;
    DescribeTenantRequest describe_tenant = 5;
  }
}

message TenantResponseUnion {
  oneof response {
    ListTenantsResponse list_tenants = 1;
    CreateTenantResponse create_tenant = 2;
    UpdateTenantResponse update_tenant = 3;
    DeleteTenantResponse delete_tenant = 4;
    DescribeTenantResponse describe_tenant = 5;
  }
}

message ListTenantsRequest {}

message ListTenantsResponse { repeated TenantDesc descs = 1; }

message CreateTenantRequest { TenantDesc desc = 1; }

message CreateTenantResponse { TenantDesc desc = 1; }

message UpdateTenantRequest { TenantDesc desc = 1; }

message UpdateTenantResponse {}

message DeleteTenantRequest { string name = 1; }

message DeleteTenantResponse {}

message DescribeTenantRequest { string name = 1; }

message DescribeTenantResponse { TenantDesc desc = 1; }

message BucketRequest {
  string tenant = 1;
  repeated BucketRequestUnion requests = 2;
}

message BucketResponse { repeated BucketResponseUnion responses = 1; }

message BucketRequestUnion {
  oneof request {
    ListBucketsRequest list_buckets = 1;
    CreateBucketRequest create_bucket = 2;
    UpdateBucketRequest update_bucket = 3;
    DeleteBucketRequest delete_bucket = 4;
    DescribeBucketRequest describe_bucket = 5;
  }
}

message BucketResponseUnion {
  oneof response {
    ListBucketsResponse list_buckets = 1;
    CreateBucketResponse create_bucket = 2;
    UpdateBucketResponse update_bucket = 3;
    DeleteBucketResponse delete_bucket = 4;
    DescribeBucketResponse describe_bucket = 5;
  }
}

message ListBucketsRequest {}

message ListBucketsResponse { repeated BucketDesc descs = 1; }

message CreateBucketRequest { BucketDesc desc = 1; }

message CreateBucketResponse { BucketDesc desc = 1; }

message UpdateBucketRequest { BucketDesc desc = 1; }

message UpdateBucketResponse {}

message DeleteBucketRequest { string name = 1; }

message DeleteBucketResponse {}

message DescribeBucketRequest { string name = 1; }

message DescribeBucketResponse { BucketDesc desc = 1; }

message TenantDesc {
  uint64 id = 1;
  string name = 2;
}

message BucketDesc {
  uint64 id = 1;
  string name = 2;
  uint64 parent_id = 3;
}

message IngestRequest {
  uint64 tenant_id = 1;
  IngestRequestUnion request = 2;
}

message IngestResponse { IngestResponseUnion response = 1; }

message IngestRequestUnion {
  oneof request {
    BeginIngestionRequest begin_ingestion = 1;
    CommitIngestionRequest commit_ingestion = 2;
    AllocateFileNameRequest allocate_file_name = 3;
  }
}

message IngestResponseUnion {
  oneof response {
    BeginIngestionResponse begin_ingestion = 1;
    CommitIngestionResponse commit_ingestion = 2;
    AllocateFileNameResponse allocate_file_name = 3;
  }
}

message BeginIngestionRequest {}

message BeginIngestionResponse {}

message CommitIngestionRequest {
  oneof output {
    BulkLoadOutput bulkload = 1;
    CompactionOutput compaction = 2;
  }
}

message CommitIngestionResponse {}

message AllocateFileNameRequest { uint64 count = 1; }

message AllocateFileNameResponse { repeated string file_names = 1; }

message BulkLoadOutput { repeated TenantFileDesc files = 1; }

message CompactionOutput {}

message TenantFileDesc {
  uint64 bucket_id = 1;
  string file_name = 2;
  uint64 file_size = 3;
  bytes lower_bound = 4;
  bytes upper_bound = 5;
}
