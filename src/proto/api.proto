// Copyright 2022 The Engula Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package engula.proto.v1;

import "proto/error.proto";
import "proto/data.proto";
import "proto/metadata.proto";

message RequestHeader {
    bytes key = 1;
}

message ResponseHeader {}

message GetRequest {
    RequestHeader header = 1;
}

message GetResponse {
    ResponseHeader header = 1;
    Value value = 2;
}

message PutRequest {
    RequestHeader header = 1;
    Value value = 2;
}

message PutResponse {
    ResponseHeader header = 1;
}

message DeleteRequest {
    RequestHeader header = 1;
}

message DeleteResponse {
    ResponseHeader header = 1;
}

message RequestUnion {
    oneof value {
        GetRequest get = 1;
        PutRequest put = 2;
        DeleteRequest delete = 3;
    }
}

message ResponseUnion {
    oneof value {
        GetResponse get = 1;
        PutResponse put = 2;
        DeleteResponse delete = 3;
    }
}

message BatchRequest {
    message Header {
        uint64 group_id = 1;
        uint64 shard_id = 2;
        ReplicaDescriptor replia = 3;
    }

    Header header = 1;
    repeated RequestUnion requests = 2;
}

message BatchResponse {
    message Header {
        Error error = 1;
    }
    Header header = 1;
    repeated ResponseUnion responses = 2;
}

message ShardLookupRequest {
    bytes key = 1;
}

message ShardLookupResponse {
    GroupDescriptor descriptor = 1;
    // If non-nil, the other fields will be empty.
    Error error = 2;
}

message GossipSubscriptionRequest {
    repeated string patterns = 1;
}

message GossipSubscriptionEvent {
    string key = 1;
    Value content = 2;
    /// Which pattern does this gossip information match?
    string pattern_matched = 3;

    Error error = 4;
}

message JoinNodeRequest {
    Version binary_version = 1;
}

message JoinNodeResponse {
    uint64 cluster_id = 1;
    int32 node_id = 2;

    Version active_version = 3;
}

service Internal {
    rpc Batch(BatchRequest) returns (BatchResponse) {}
    rpc ShardLookup(ShardLookupRequest) returns (ShardLookupResponse) {}

    rpc GossipSubscription(GossipSubscriptionRequest) returns (stream GossipSubscriptionEvent) {}

    /// Join a bootstrapted cluster. If the target node is not a part of a bootstrapted cluster,
    /// an appropriate error is returned.
    rpc Join(JoinNodeRequest) returns (JoinNodeResponse) {}
}
