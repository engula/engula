// Copyright 2022 The Engula Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package engula.server.v1;

import "engula/v1/engula.proto";
import "engula/server/v1/error.proto";
import "engula/server/v1/metadata.proto";
import "google/protobuf/field_mask.proto";

service Node {
  rpc Batch(BatchRequest) returns (BatchResponse) {}
  rpc GetRoot(GetRootRequest) returns (GetRootResponse) {}
  rpc CreateReplica(CreateReplicaRequest) returns (CreateReplicaResponse) {}

  /// RemoveReplica allows shuts down and deletes an orphan replica from the specified node.
  ///
  /// It is only executed when the user specifies a newer `GroupDesc` and the replica no longer
  /// belongs to the group.
  rpc RemoveReplica(RemoveReplicaRequest) returns (RemoveReplicaResponse) {}
  rpc RootHeartbeat(HeartbeatRequest) returns (HeartbeatResponse) {}
}

message BatchRequest {
  uint64 node_id = 1;
  repeated GroupRequest requests = 2;
}

message BatchResponse { repeated GroupResponse responses = 1; }

message GroupRequest {
  uint64 group_id = 1;
  uint64 shard_id = 2;
  GroupRequestUnion request = 3;
}

message GroupResponse {
  GroupResponseUnion response = 1;

  /// Only used in BatchResponse.
  Error error = 2;
}

message GroupRequestUnion {
  oneof request {
    engula.v1.GetRequest get = 1;
    engula.v1.PutRequest put = 2;
    engula.v1.DeleteRequest delete = 3;
    BatchWriteRequest batch_write = 4;

    /// Add a new shard to an existing group.
    CreateShardRequest create_shard = 5;

    /// Change replicas of an existing group.
    ChangeReplicasRequest change_replicas = 6;
  }
}

message GroupResponseUnion {
  oneof response {
    engula.v1.GetResponse get = 1;
    engula.v1.PutResponse put = 2;
    engula.v1.DeleteResponse delete = 3;
    BatchWriteResponse batch_write = 4;
    CreateShardResponse create_shard = 5;
    ChangeReplicasResponse change_replicas = 6;
  }
}

/// Execute batch write to a shard to ensure atomic writes.
///
/// Since the interface does not need to be exposed to users, the definition is placed in
/// this file.
message BatchWriteRequest {
  repeated engula.v1.DeleteRequest deletes = 1;
  repeated engula.v1.PutRequest puts = 2;
}

message BatchWriteResponse {}

message GetRootRequest {}

message GetRootResponse { repeated string addrs = 1; }

message CreateReplicaRequest {
  uint64 replica_id = 1;
  GroupDesc group = 2;
}

message CreateReplicaResponse {}

message RemoveReplicaRequest {
  uint64 replica_id = 1;
  GroupDesc group = 2;
}

message RemoveReplicaResponse {}

message CreateShardRequest { ShardDesc shard = 1; }

message CreateShardResponse {}

message ChangeReplicasRequest { ChangeReplicas change_replicas = 1; }

message ChangeReplicasResponse {}

message ChangeReplicas { repeated ChangeReplica changes = 1; }

message ChangeReplica {
  ChangeReplicaType change_type = 1;

  uint64 replica_id = 2;
  uint64 node_id = 3;
}

enum ChangeReplicaType {
  ADD = 0;
  REMOVE = 1;
  ADD_LEARNER = 2;
}

message HeartbeatRequest {
  uint64 timestamp = 1;
  repeated PiggybackRequest piggybacks = 2;
}

message HeartbeatResponse {
  uint64 timestamp = 1;
  repeated PiggybackResponse piggybacks = 2;
}

message PiggybackRequest {
  oneof info {
    SyncRootRequest sync_root = 1;
    CollectStatsRequest collect_stats = 2;
    CollectGroupDetailRequest collect_group_detail = 3;
  }
}

message PiggybackResponse {
  oneof info {
    SyncRootResponse sync_root = 1;
    CollectStatsResponse collect_stats = 2;
    CollectGroupDetailResponse collect_group_detail = 3;
  }
}

message SyncRootRequest { repeated NodeDesc roots = 1; }

message SyncRootResponse {}

message CollectStatsRequest { google.protobuf.FieldMask field_mask = 1; }

message CollectStatsResponse {
  NodeStats node_stats = 1;
  repeated GroupStats group_stats = 2;
  repeated ReplicaStats replica_stats = 3;
}

message NodeStats {
  uint64 available_space = 1;
  uint32 group_count = 2;
  uint32 leader_count = 3;
  uint64 replica_count = 4;
  float read_qps = 5;
  float write_qps = 6;
}

message GroupStats {
  uint64 group_id = 1;
  uint64 shared_count = 2;
  float read_qps = 3;
  float write_qps = 4;
}

message ReplicaStats {
  uint64 replica_id = 1;
  uint64 group_id = 2;
  float read_qps = 3;
  float write_qps = 4;
}

message CollectGroupDetailRequest {}

message CollectGroupDetailResponse {}
