// Copyright 2022 The Engula Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package engula.server.v1;

import "engula/v1/engula.proto";
import "engula/v1/metadata.proto";
import "engula/server/v1/metadata.proto";

service Root {
  rpc Admin(engula.v1.AdminRequest) returns (engula.v1.AdminResponse) {}
  rpc Watch(WatchRequest) returns (stream WatchResponse) {}

  /// Join a bootstrapped cluster. If the target node is itself not part of a
  /// bootstrapped cluster, an appropriate error is returned.
  rpc Join(JoinNodeRequest) returns (JoinNodeResponse) {}

  /// A temporary method for querying the NodeDesc corresponding to node_id.
  /// Once Watch is implemented, this method can be replaced by Watch.
  rpc Resolve(ResolveNodeRequest) returns (ResolveNodeResponse) {}

  /// Report the changes of metadata and volatile states of group or replicas.
  rpc Report(ReportRequest) returns (ReportResponse) {}
}

message WatchRequest { uint64 sequence = 1; }

message WatchResponse {
  uint64 sequence = 1;

  message UpdateEvent {
    oneof event {
      NodeDesc node = 1;
      GroupDesc group = 2;
      GroupState group_state = 3;
      engula.v1.DatabaseDesc database = 4;
      engula.v1.CollectionDesc collection = 5;
    }
  }

  message DeleteEvent {
    oneof event {
      uint64 node = 1;
      uint64 group = 2;
      uint64 database = 3;
      uint64 collection = 4;
    }
  }

  repeated UpdateEvent updates = 2;
  repeated DeleteEvent deletes = 3;
}

message JoinNodeRequest { string addr = 1; }

message JoinNodeResponse {
  bytes cluster_id = 1;
  uint64 node_id = 2;
  repeated NodeDesc roots = 3;
}

message ResolveNodeRequest { uint64 node_id = 2; }

message ResolveNodeResponse { NodeDesc node = 1; }

message ReportRequest {
  message GroupUpdates {
    uint64 group_id = 1;
    /// The leader is responsible for reporting the `GroupDesc` when the
    /// `GroupDesc` changes.
    optional GroupDesc group_desc = 2;

    /// Each replica is responsible for reporting itself's volatile state.
    optional ReplicaState replica_state = 3;
  }

  repeated GroupUpdates updates = 1;
}

message ReportResponse {}
