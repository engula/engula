// Copyright 2022 The Engula Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package streamengine.store.v1;

enum EntryType {
    HOLE = 0;
    EVENT = 1;
    BRIDGE = 2;
}

message Entry {
    EntryType entry_type = 1;
    uint32 epoch = 2;
    bytes event = 3;
}

service Store {
    // Read some entries from a segment.
    rpc Read(ReadRequest) returns (stream ReadResponse);

    rpc Mutate(MutateRequest) returns (MutateResponse);
}

message MutateRequest {
    uint64 stream_id = 1;
    uint32 writer_epoch = 2;

    MutateRequestUnion request = 3;
}

message MutateResponse {
    MutateResponseUnion response = 1;
}

message MutateRequestUnion {
    oneof request {
        // Store some continuous entries to a segment. This function will create
        // a new segment replica if it not exists.
        WriteRequest write = 1;

        // Seal the corresponding segment so that any request with small epoch will be rejected.
        SealRequest seal = 2;
    }
}

message MutateResponseUnion {
    oneof response {
        WriteResponse write = 1;
        SealResponse seal = 2;
    }
}

message WriteRequest {
    uint32 segment_epoch = 1;

    // The entries before this sequence have been acked. This value might
    // euquals to `(seg_epoch << 32) | (first_index + events.len())`, so
    // a server would forwards acked once the event all persisted.
    uint64 acked_seq = 2;

    uint32 first_index = 3;

    repeated Entry entries = 4;
}

message WriteResponse {
    // The store only returns continouesly index.
    uint32 matched_index = 1;
    uint32 acked_index = 2;
}

message ReadRequest {
    uint64 stream_id = 1;
    uint32 seg_epoch = 2;

    uint32 start_index = 3;
    uint32 limit = 4;

    bool include_pending_entries = 5;
}

message ReadResponse {
    uint32 index = 1;
    Entry entry = 2;
}

message SealRequest {
    uint32 segment_epoch = 1;
}

message SealResponse {
    // The acked index this replica already known.  This field is used to help
    // determine the starting position of log entries that need recovery.
    uint32 acked_index = 1;
}
